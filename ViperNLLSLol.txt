local correctKey = "ILOVEVIPERLOL"
if getgenv().Key ~= correctKey then
    game.Players.LocalPlayer:Kick("Wrong Key! Access Denied.")
    return
end

-- If the key is correct, continue with your script
-- Example: Load RedzLib
local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/newredz/RedzLibV5/main/Source.lua"))()
repeat task.wait() until redzlib

-- Your hub script continues here...

-- Create the window
local Window = redzlib:MakeWindow({
    Title = "nova Hub : Lifting Simulator",
    SubTitle = "by Viper",
    SaveFolder = "redz Hub | Blox Fruits.lua"
})

local Discord = Window:MakeTab({
    Title = "Information",
    Description = "Info",
    Icon = "Info",  -- Fixed the split "Icon"
})


local Main = Window:MakeTab({
    Title = "Main",
    Description = "Info",
    Icon = "home",  -- Fixed the split "Icon"
})

local Bloodlines = Window:MakeTab({
    Title = "Bloodlines",
    Description = "palm",
    Icon = "swords",  -- Fixed the split "Icon"
})


local Teleport = Window:MakeTab({
    Title = "Teleport",
    Description = "palm",
    Icon = "palm",  -- Fixed the split "Icon"
})

local Settings = Window:MakeTab({
    Title = "Settings",
    Description = "palm",
    Icon = "settings",  -- Fixed the split "Icon"
})


local v22 = Instance.new("ScreenGui")
local v23 = Instance.new("ImageButton")
local v25 = Instance.new("ParticleEmitter")
local v26 = game:GetService("TweenService")

v22.Name = "RedzToggleUI"
v22.Parent = game.CoreGui
v22.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

v23.Name = "OpenToggle"
v23.Parent = v22
v23.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
v23.BorderSizePixel = 0
v23.Position = UDim2.new(0.1, 0, 0.1, 0)
v23.Size = UDim2.new(0, 35, 0, 35)
v23.Image = "rbxassetid://123448871674913"
v23.Draggable = true

v25.Parent = v23
v25.LightEmission = 1
v25.Size = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0.1),
    NumberSequenceKeypoint.new(1, 0)
})
v25.Lifetime = NumberRange.new(0.5, 1)
v25.Rate = 0
v25.Speed = NumberRange.new(5, 10)
v25.Color = ColorSequence.new(Color3.fromRGB(255, 85, 255), Color3.fromRGB(85, 255, 255))

v23.MouseButton1Down:Connect(function()
    v25.Rate = 100

    if Window.Enabled then
        Window:Minimize(true)
    else
        Window:Minimize(false)
    end

    task.delay(1, function()
        v25.Rate = 0
    end)
end)

local entranceTween = v26:Create(v23, TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), {
    Position = UDim2.new(0.1, 0, 0.1, 0),
    Size = UDim2.new(0, 35, 0, 35),
    BackgroundTransparency = 0.2
})
entranceTween:Play()



Discord:AddDiscordInvite({
    Name = "nova Hub | Community",
    Description = "Join our discord community to receive information about the next update",
    Logo = "rbxassetid://120931314112734", -- Check if this ID is correct and exists
    Invite = "https://discord.gg/brrYwzpWg7"
})

Main:AddSection("Main UI")

Main:AddDropdown({
    Name = "UI Size",
    Flag = "Setting/UISize",
    Default = "Medium",
    Options = { "Small", "Medium", "Large" },
    Callback = function(option)
        if option == "Small" then
            game:GetService("CoreGui").RedzLibV5.Main.Size = UDim2.new(0, 400, 0, 300)
        elseif option == "Medium" then
            game:GetService("CoreGui").RedzLibV5.Main.Size = UDim2.new(0, 500, 0, 350)
        elseif option == "Large" then
            game:GetService("CoreGui").RedzLibV5.Main.Size = UDim2.new(0, 600, 0, 400)
        end
    end
})


Main:AddSection("Main Farm")

Main:AddToggle({
    Name = "Auto Gain Muscle",
    Flag = "Main/AutoGainMuscle",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoGainMuscle = Value
        print("AutoGainMuscle toggled:", Value)

        if Value then
            task.spawn(function()
                while getgenv().AutoGainMuscle do
                    local args = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                    task.wait(0.1) -- Adjust delay if needed
                end
            end)
        end
    end
})



Main:AddToggle({
    Name = "Auto Buy Weight",
    Flag = "Items/AutoBuyWeight",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoBuyWeight = Value
        print("AutoBuyWeight toggled:", Value)

        if Value then
            task.spawn(function()
                while getgenv().AutoBuyWeight do
                    for i = 1, 20 do
                        local args = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Income_Item",
                                [3] = "Weight",
                                [4] = i
                            }
                        }
                        print("Trying to buy Weight index:", i)
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.2)
                    end
                    task.wait(1) -- Give the server a small break
                end
            end)
        end
    end
})



Main:AddToggle({
    Name = "Auto Buy Bag",
    Flag = "Items/AutoBuyBag",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoBuyBag = Value
        print("AutoBuyBag toggled:", Value)

        if Value then
            task.spawn(function()
                while getgenv().AutoBuyBag do
                    for i = 1, 20 do
                        local args = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Bag_Item",
                                [3] = "Bag",
                                [4] = i
                            }
                        }
                        print("Trying to buy Bag index:", i)
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.2)
                    end
                    task.wait(1)
                end
            end)
        end
    end
})


Main:AddToggle({
    Name = "Auto Buy Rebirth",
    Flag = "Items/AutoBuyRebirth",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoBuyRebirth = Value
        print("AutoBuyRebirth toggled:", Value)

        if Value then
            task.spawn(function()
                while getgenv().AutoBuyRebirth do
                    for i = 1, 20 do
                        local args = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Rebirth_Item",
                                [3] = "Rebirth",
                                [4] = i
                            }
                        }
                        print("Trying to buy Rebirth index:", i)
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.2)
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

Main:AddSection("Kaitun Farm (Recommended)")


Main:AddToggle({
    Name = "Gain Muscle + Sell If Full Storage",
    Flag = "Main/AutoGain",
    Callback = function(Value)
        if Value then
            print("✅ Auto-Sell & Gain Muscle Enabled")
            _G.AutoSell = true
            _G.GainMuscle = true

            local replicatedStorage = game:GetService("ReplicatedStorage")
            local remoteEvent = replicatedStorage:WaitForChild("RemoteEvent")
            local player = game:GetService("Players").LocalPlayer
            local muscleStat = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Muscle")

            local muscleHistory = {}
            local historyLength = 3

            -- Gain Muscle Loop
            spawn(function()
                while _G.GainMuscle do
                    local args = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }
                    remoteEvent:FireServer(unpack(args))
                    task.wait(0.7)
                end
            end)

            -- Auto-Sell Loop
            spawn(function()
                while _G.AutoSell do
                    task.wait(1)

                    if muscleStat then
                        table.insert(muscleHistory, muscleStat.Value)
                        if #muscleHistory > historyLength then
                            table.remove(muscleHistory, 1)
                        end

                        local allSame = true
                        for i = 2, #muscleHistory do
                            if muscleHistory[i] ~= muscleHistory[i - 1] then
                                allSame = false
                                break
                            end
                        end

                        if allSame and #muscleHistory >= historyLength then
                            print("⚡ No muscle gain detected. Selling...")
                            local args = {
                                [1] = {
                                    [1] = "SellMuscle"
                                }
                            }
                            remoteEvent:FireServer(unpack(args))
                            muscleHistory = {}
                        end
                    else
                        print("❌ Muscle stat not found! Check the stat name.")
                    end
                end
            end)
        else
            print("❌ Auto-Sell & Gain Muscle Disabled")
            _G.AutoSell = false
            _G.GainMuscle = false
        end
    end,
})



Main:AddToggle({
    Name = "Gain Muscle + Sell If Full Storage (Fast Lifter Gamepass)",
    Flag = "Main/AutoGainFast",
    Default = false,
    Callback = function(Value)
        if Value then
            print("✅ Auto-Sell & Gain Muscle (Fast Lifter) Enabled")
            _G.AutoSell = true
            _G.GainMuscle = true

            local replicatedStorage = game:GetService("ReplicatedStorage")
            local remoteEvent = replicatedStorage:WaitForChild("RemoteEvent")
            local player = game:GetService("Players").LocalPlayer
            local muscleStat = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Muscle")

            local muscleHistory = {}
            local historyLength = 3

            -- Gain Muscle Loop (Fast)
            spawn(function()
                while _G.GainMuscle do
                    local args = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }
                    remoteEvent:FireServer(unpack(args))
                    task.wait(0.45)
                end
            end)

            -- Auto-Sell Loop
            spawn(function()
                while _G.AutoSell do
                    task.wait(1)

                    if muscleStat then
                        table.insert(muscleHistory, muscleStat.Value)
                        if #muscleHistory > historyLength then
                            table.remove(muscleHistory, 1)
                        end

                        local allSame = true
                        for i = 2, #muscleHistory do
                            if muscleHistory[i] ~= muscleHistory[i - 1] then
                                allSame = false
                                break
                            end
                        end

                        if allSame and #muscleHistory >= historyLength then
                            print("⚡ No muscle gain detected. Selling...")

                            local args = {
                                [1] = {
                                    [1] = "SellMuscle"
                                }
                            }
                            remoteEvent:FireServer(unpack(args))

                            muscleHistory = {}
                        end
                    else
                        print("❌ Muscle stat not found.")
                    end
                end
            end)
        else
            print("❌ Auto-Sell & Gain Muscle (Fast Lifter) Disabled")
            _G.AutoSell = false
            _G.GainMuscle = false
        end
    end,
})



Main:AddToggle({
    Name = "Auto Gain + Sell + Buy All",
    Flag = "Main/AutoEverything",
    Description = "Kaitun, Weight, DNA, Rebirth Lol",
    Default = false,
    Callback = function(Value)
        getgenv().AutoEverything = Value
        
        if Value then
            task.spawn(function()
                while getgenv().AutoEverything and task.wait() do
                    -- Gain Muscle
                    local argsGain = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsGain))
                    
                    -- Wait a bit
                    task.wait(0.2)
                    
                    -- Sell Muscle
                    local argsSell = {
                        [1] = {
                            [1] = "SellMuscle"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsSell))
                    
                    -- Try to buy best weight
                    for i = 100, 1, -1 do
                        local argsWeight = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Income_Item",
                                [3] = "Weight",
                                [4] = i
                            }
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsWeight))
                    end
                    
                    -- Try to buy best bag
                    for i = 100, 1, -1 do
                        local argsBag = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Bag_Item",
                                [3] = "Bag",
                                [4] = i
                            }
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsBag))
                    end
                    
                    -- Try to buy best rebirth item
                    for i = 100, 1, -1 do
                        local argsRebirth = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Rebirth_Item",
                                [3] = "Rebirth",
                                [4] = i
                            }
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsRebirth))
                    end
                    
                    -- Wait a bit before next cycle
                    task.wait(0.3)
                end
            end)
        end
    end
})






Main:AddToggle({
    Name = "Auto Gain + Sell Muscle",
    Flag = "Main/AutoGainAndSellMuscle",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoGainAndSellMuscle = Value
        
        if Value then
            task.spawn(function()
                while getgenv().AutoGainAndSellMuscle and task.wait() do
                    -- Gain Muscle
                    local argsGain = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsGain))
                    
                    -- Wait a bit
                    task.wait(0.2)
                    
                    -- Sell Muscle (without checking status)
                    local argsSell = {
                        [1] = {
                            [1] = "SellMuscle"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsSell))
                    
                    -- Wait a bit after selling
                    task.wait(0.3)
                end
            end)
        end
    end
})







Main:AddToggle({
    Name = "Auto Sell Muscle",
    Flag = "Items/AutoSellMuscle",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoSellMuscle = Value

        if Value then
            task.spawn(function()
                while getgenv().AutoSellMuscle do
                    local args = {
                        [1] = { [1] = "SellMuscle" }
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                    task.wait(1)
                end
            end)
        end
    end
})

Main:AddSection("Safe Smart")



Main:AddToggle({
    Name = "Smart Weight",
    Flag = "Main/SmartWeight",
    Default = false,
    Callback = function(Value)
        getgenv().SmartWeight = Value

        if Value then
            local player = game:GetService("Players").LocalPlayer

            task.spawn(function()
                while getgenv().SmartWeight do
                    if not player.leaderstats or not player.leaderstats:FindFirstChild("Stage") then
                        warn("Stage not found in leaderstats!")
                        return
                    end

                    local stage = player.leaderstats.Stage.Value
                    local maxWeight = 21

                    if stage == 1 then maxWeight = 27
                    elseif stage == 2 then maxWeight = 32
                    elseif stage == 3 then maxWeight = 37
                    elseif stage == 4 then maxWeight = 41
                    elseif stage == 5 then maxWeight = 46
                    elseif stage == 6 then maxWeight = 51
                    elseif stage == 7 then maxWeight = 56
                    elseif stage == 8 then maxWeight = 61
                    elseif stage == 9 then maxWeight = 64
                    elseif stage == 10 then maxWeight = 69
                    elseif stage == 11 then maxWeight = 72
                    elseif stage == 12 then maxWeight = 75
                    elseif stage == 13 then maxWeight = 78
                    elseif stage == 14 then maxWeight = 81
                    elseif stage == 15 then maxWeight = 84
                    elseif stage == 16 then maxWeight = 87
                    elseif stage == 17 then maxWeight = 90
                    elseif stage == 18 then maxWeight = 93
                    elseif stage == 19 then maxWeight = 96
                    elseif stage == 20 then maxWeight = 99
                    elseif stage == 21 then maxWeight = 102
                    elseif stage == 22 then maxWeight = 105
                    elseif stage == 23 then maxWeight = 108
                    elseif stage == 24 then maxWeight = 111
                    elseif stage == 25 then maxWeight = 114
                    elseif stage == 26 then maxWeight = 120
                    elseif stage == 27 then maxWeight = 126
                    elseif stage == 28 then maxWeight = 132
                    elseif stage == 29 then maxWeight = 138
                    elseif stage > 30 then maxWeight = 144
                    end

                    for i = 2, maxWeight do
                        if not getgenv().SmartWeight then return end

                        local args = {
                            [1] = {"BuyItem", "Income_Item", "Weight", i}
                        }

                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.1)
                    end

                    task.wait(1)
                end
            end)
        end
    end,
})




Main:AddToggle({
    Name = "Smart DNA",
    Flag = "Main/SmartDNA",
    Default = false,
    Callback = function(Value)
        getgenv().BuyDNA = Value

        if Value then
            local player = game.Players.LocalPlayer
            local ReplicatedStorage = game:GetService("ReplicatedStorage")

            task.spawn(function()
                while getgenv().BuyDNA do
                    local stage = player.leaderstats:FindFirstChild("Stage") and player.leaderstats.Stage.Value or 0
                    local maxDNA = 12

                    if stage == 1 then maxDNA = 16
                    elseif stage == 2 then maxDNA = 18
                    elseif stage == 3 then maxDNA = 37
                    elseif stage == 4 then maxDNA = 41
                    elseif stage == 5 then maxDNA = 24
                    elseif stage == 6 then maxDNA = 28
                    elseif stage == 7 then maxDNA = 30
                    elseif stage == 8 then maxDNA = 32
                    elseif stage == 9 then maxDNA = 37
                    elseif stage == 10 then maxDNA = 39
                    elseif stage == 11 then maxDNA = 43
                    elseif stage == 12 then maxDNA = 44
                    elseif stage == 13 then maxDNA = 44
                    elseif stage == 14 then maxDNA = 45
                    elseif stage == 15 then maxDNA = 46
                    elseif stage == 16 then maxDNA = 48
                    elseif stage == 17 then maxDNA = 49
                    elseif stage == 18 then maxDNA = 50
                    elseif stage == 19 then maxDNA = 51
                    elseif stage == 20 then maxDNA = 51
                    elseif stage == 21 then maxDNA = 52
                    elseif stage == 22 then maxDNA = 52
                    elseif stage == 23 then maxDNA = 53
                    elseif stage == 24 then maxDNA = 55
                    elseif stage == 25 then maxDNA = 56
                    elseif stage == 26 then maxDNA = 58
                    elseif stage == 27 then maxDNA = 60
                    elseif stage == 28 then maxDNA = 62
                    elseif stage == 29 then maxDNA = 64
                    elseif stage > 30 then maxDNA = 70 end

                    for i = 1, maxDNA do
                        if not getgenv().BuyDNA then return end

                        local args = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Bag_Item",
                                [3] = "DNA name",
                                [4] = i
                            }
                        }

                        ReplicatedStorage:WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.1)
                    end

                    task.wait(1)
                end
            end)
        end
    end,
})


Main:AddSection("Anti Slow")

Main:AddSlider({
    Name = "WalkSpeed",
    Flag = "Settings/WalkSpeed",
    Min = 16,  -- Default Roblox walkspeed
    Max = 1500,  -- Adjust the max speed as needed
    Default = 16,  -- Default value for walkspeed
    Increment = 1,  -- Step value for the slider
    Description = "",
    Callback = function(value)
        _G.CustomWalkSpeed = value  -- Store the value globally
        
        -- Only apply if the toggle is enabled
        if _G.WalkSpeedEnabled then
            -- Try multiple approaches to bypass anti-cheat
            local character = game:GetService("Players").LocalPlayer.Character
            if character then
                -- Method 1: Direct approach with pcall to avoid errors
                pcall(function()
                    character:WaitForChild("Humanoid").WalkSpeed = value
                end)
                
                -- Method 2: Use RunService for continuous application
                -- This helps bypass anti-cheats that reset walkspeed
                if not _G.WalkSpeedLoop then
                    _G.WalkSpeedLoop = true
                    spawn(function()
                        while _G.WalkSpeedEnabled and wait() do
                            if character and character:FindFirstChild("Humanoid") then
                                character.Humanoid.WalkSpeed = _G.CustomWalkSpeed
                            end
                        end
                    end)
                end
            end
        end
    end
})

Main:AddToggle({
    Name = "Enable WalkSpeed",
    Flag = "Settings/EnableWalkSpeed",
    Description = "",
    Default = false,
    Callback = function(enabled)
        _G.WalkSpeedEnabled = enabled
        
        if enabled then
            -- Apply the stored walkspeed value
            local walkspeed = _G.CustomWalkSpeed or 16  -- Default WalkSpeed if not set
            
            -- Start a loop that continuously sets the walkspeed
            -- This helps bypass anti-cheats that reset values
            if not _G.WalkSpeedLoop then
                _G.WalkSpeedLoop = true
                spawn(function()
                    while _G.WalkSpeedEnabled and wait() do
                        local character = game:GetService("Players").LocalPlayer.Character
                        if character and character:FindFirstChild("Humanoid") then
                            character.Humanoid.WalkSpeed = _G.CustomWalkSpeed
                        end
                    end
                end)
            end
        else
            -- Disable the loop and reset walkspeed
            _G.WalkSpeedLoop = false
            local character = game:GetService("Players").LocalPlayer.Character
            if character and character:FindFirstChild("Humanoid") then
                character.Humanoid.WalkSpeed = 16  -- Reset to default
            end
        end
    end
})

-- Add a connection to handle character respawning
game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(character)
    wait(1)  -- Give time for the character to fully load
    if _G.WalkSpeedEnabled and _G.CustomWalkSpeed then
        character:WaitForChild("Humanoid").WalkSpeed = _G.CustomWalkSpeed
    end
end)



Teleport:AddDropdown({
    Name = "Smoothness",
    Flag = "Main/UISize",
    Default = "Normal",
    Options = { "Normal", "Smooth" },
    Callback = function(option)
        local newSizeX, newSizeY
        if option == "Normal" then
            newSizeX, newSizeY = 550, 380
        elseif option == "Smaller" then
            newSizeX, newSizeY = 450, 320
        end
        
        -- Update the saved UI size values
        redzlib.Save.UISize = {newSizeX, newSizeY}
        
        -- Find the main frame and update its size
        local mainFrame = ScreenGui:FindFirstChild("Hub")
        if mainFrame then
            mainFrame.Size = UDim2.fromOffset(newSizeX, newSizeY)
            mainFrame.Position = UDim2.new(0.5, -newSizeX/2, 0.5, -newSizeY/2)
        end
        
        -- If you need to adjust tab sizes as well, you'll need to locate the tab container
        -- This part depends on how your tabs are organized
        local tabContainer = mainFrame:FindFirstChild("TabContainer") or mainFrame:FindFirstChild("Components"):FindFirstChild("Tabs")
        if tabContainer then
            local tabSize = option == "Normal" and 160 or 140
            for _, tab in pairs(tabContainer:GetChildren()) do
                if tab:IsA("TextButton") or tab:IsA("Frame") then
                    tab.Size = UDim2.new(0, tabSize, 0, 30)
                end
            end
        end
    end
})


Teleport:AddSection("Teleportation")

Teleport:AddToggle({
    Name = "Teleport 1st Stage",
    Flag = "Teleport/To1stStage",
    Default = false,
    Callback = function(Value)
        if Value then
            local plr = game.Players.LocalPlayer
            local char = plr.Character or plr.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            hrp.CFrame = CFrame.new(3427.74853515625, -51.910560607910156, 1934.411865234375)
        end
    end
})


Teleport:AddToggle({
    Name = "Teleport 2nd Stage",
    Flag = "Teleport/To2ndIsland",
    Default = false,
    Callback = function(Value)
        if Value then
            local plr = game.Players.LocalPlayer
            local char = plr.Character or plr.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            hrp.CFrame = CFrame.new(6039.3310546875, -51.910560607910156, 2103.028564453125)
        end
    end
})


Teleport:AddToggle({
    Name = "Teleport 3rd Stage",
    Flag = "Teleport/To3rdIsland",
    Default = false,
    Callback = function(Value)
        if Value then
            local plr = game.Players.LocalPlayer
            local char = plr.Character or plr.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            hrp.CFrame = CFrame.new(8773.9248046875, -51.910560607910156, 2032.6875)
        end
    end
})

Teleport:AddToggle({
    Name = "Teleport 4rd Stage",
    Flag = "Teleport/To3rdIsland",
    Default = false,
    Callback = function(Value)
        if Value then
            local plr = game.Players.LocalPlayer
            local char = plr.Character or plr.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            hrp.CFrame = CFrame.new(11798.42,94.01,1875.52)
        end
    end
})



Bloodlines:AddToggle({
    Name = "Auto Farm Boss 1",
    Flag = "Main/AutoFarmBoss1",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoFarmBoss1 = Value

        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        task.spawn(function()
            while getgenv().AutoFarmBoss1 do
                local character = LocalPlayer.Character
                local backpack = LocalPlayer.Backpack
                local hrp = character and character:FindFirstChild("HumanoidRootPart")

                -- Teleport to Boss 1 spawn area
                if hrp then
                    hrp.CFrame = CFrame.new(2144.50415, -4.76272964, 1889.84302, 0.10488975, 0, 0.994483829, 0, 1, 0, -0.994483829, 0, 0.10488975)
                end

                -- Auto equip and click Fist
                local fist = backpack:FindFirstChild("Fist") or (character and character:FindFirstChild("Fist"))
                if fist then
                    pcall(function()
                        if fist.Parent == backpack then
                            fist.Parent = character
                            task.wait(0.1)
                        end
                        if fist.Activate then
                            fist:Activate()
                        end
                    end)
                end

                task.wait(0.3)

                -- Auto equip and click Foot
                local foot = backpack:FindFirstChild("Foot") or (character and character:FindFirstChild("Foot"))
                if foot then
                    pcall(function()
                        if foot.Parent == backpack then
                            foot.Parent = character
                            task.wait(0.1)
                        end
                        if foot.Activate then
                            foot:Activate()
                        end
                    end)
                end

                task.wait(0.3)
            end
        end)
    end
})


Bloodlines:AddToggle({
    Name = "Auto Farm Boss 2",
    Flag = "Main/AutoFarmBoss2",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoFarmBoss2 = Value

        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        task.spawn(function()
            while getgenv().AutoFarmBoss2 do
                local character = LocalPlayer.Character
                local backpack = LocalPlayer.Backpack
                local hrp = character and character:FindFirstChild("HumanoidRootPart")

                -- Teleport to Boss 2 location
                if hrp then
                    hrp.CFrame = CFrame.new(4795.99854, -1.87442207, 1828.09326, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                end

                -- Auto equip and click Fist
                local fist = backpack:FindFirstChild("Fist") or (character and character:FindFirstChild("Fist"))
                if fist then
                    pcall(function()
                        if fist.Parent == backpack then
                            fist.Parent = character
                            task.wait(0.1)
                        end
                        if fist.Activate then
                            fist:Activate()
                        end
                    end)
                end

                task.wait(0.3)

                -- Auto equip and click Foot
                local foot = backpack:FindFirstChild("Foot") or (character and character:FindFirstChild("Foot"))
                if foot then
                    pcall(function()
                        if foot.Parent == backpack then
                            foot.Parent = character
                            task.wait(0.1)
                        end
                        if foot.Activate then
                            foot:Activate()
                        end
                    end)
                end

                task.wait(0.3)
            end
        end)
    end
})




Settings:AddToggle({
    Name = "Anti Kick Afk",
    Flag = "Setting/AntiAFK",
    Default = false,
    Callback = function(Value)
        getgenv().antiafk = Value

        if Value then
            local Players = game:GetService("Players")
            local VirtualUser = game:GetService("VirtualUser")
            local GC = getconnections or get_signal_cons

            if GC then
                for i, v in pairs(GC(Players.LocalPlayer.Idled)) do
                    if v.Disable then
                        v:Disable()
                    elseif v.Disconnect then
                        v:Disconnect()
                    end
                end
            else
                Players.LocalPlayer.Idled:Connect(function()
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                end)
            end

            task.spawn(function()
                while getgenv().antiafk do
                    VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    task.wait(1)
                    VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    task.wait(900)
                end
            end)
        end
    end,
})




local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- VARIABLES
local requestt = http_request or request or syn.request
local disconnected = false

-- FORMAT BIG NUMBERS
local function formatNumber(n)
    local suffixes = {"", "K", "M", "B", "T", "Qa", "Qi", "Sx", "Sp", "Oc", "No", "Dc"}
    local i = 1
    while n >= 1000 and i < #suffixes do
        n = n / 1000
        i = i + 1
    end
    return string.format("%.2f%s", n, suffixes[i])
end

-- FUNCTION TO SEND WEBHOOK
local function sendWebhook(muscleAmount, status)
    local displayName = LocalPlayer.DisplayName or "User"
    local fakeUser = displayName .. " // " .. tostring(math.random(1000, 9999))

    local data = {
        ["embeds"] = {{
            ["title"] = "NOVA.GG MUSCLE COUNT NOTIFY",
            ["type"] = "rich",
            ["color"] = tonumber("ff0000", 16), -- Red color
            ["fields"] = {
                {["name"] = 'Fake User', ["value"] = "```" .. fakeUser .. "```", ["inline"] = true},
                {["name"] = 'Total Muscle', ["value"] = "```"..formatNumber(muscleAmount).." Muscle```", ["inline"] = true},
                {["name"] = 'Status', ["value"] = "```"..status.."```", ["inline"] = true},
                {["name"] = 'Game Link', ["value"] = "[Click Here](https://www.roblox.com/games/"..game.PlaceId..")", ["inline"] = true},
                {["name"] = "Server Link", ["value"] = "```roblox://experiences/start?placeId=" .. game.PlaceId .. "&gameInstanceId=" .. game.JobId .. "```", ["inline"] = true }
            }
        }}
    }

    local jsonData = HttpService:JSONEncode(data)
    pcall(function()
        requestt({
            Url = 'https://discord.com/api/webhooks/1364420860093661295/G-iMTusqLrWcE057fU1BXxfGhQ1MUeISoUn8Cr-Dm1Nrtbc3hH9Vf6-DRQj9KKIGwMYh',
            Body = jsonData,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"}
        })
    end)
end

-- MONITOR MUSCLE
task.spawn(function()
    while not disconnected do
        task.wait(60)

        local muscleStat = LocalPlayer:FindFirstChild("leaderstats") and LocalPlayer.leaderstats:FindFirstChild("Muscle")
        if muscleStat then
            local currentMuscle = tonumber(muscleStat.Value)
            if currentMuscle then
                -- Send the total muscle value in the bag
                sendWebhook(currentMuscle, "Still on server. Working...")
            end
        end
    end
end)

-- Send disconnect status
local function sendDisconnectWebhook()
    if not disconnected then
        disconnected = true
        sendWebhook(0, "Disconnected. Not working.")
    end
end

-- Try to catch game close or teleport
LocalPlayer.OnTeleport:Connect(sendDisconnectWebhook)
game:BindToClose(sendDisconnectWebhook)

-- Failsafe using player removing event
Players.PlayerRemoving:Connect(function(player)
    if player == LocalPlayer then
        sendDisconnectWebhook()
    end
end)
